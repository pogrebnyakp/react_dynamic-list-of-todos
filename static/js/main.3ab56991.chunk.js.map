{"version":3,"sources":["App.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["TodoStatus","TodoList","todos","onSelect","visibleTodos","getVisibleTodos","query","className","map","todo","classnames","TodoList__item","completed","type","readOnly","checked","title","onClick","userId","id","getData","endpoint","fetch","then","response","ok","Error","status","json","CurrentUser","onSetSelectedUserId","useState","user","setUser","errorText","setErrorText","useEffect","getUser","catch","error","toString","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","setQuery","selectValue","setSelectValue","data","placeholder","value","onChange","event","currentTarget","target","Object","keys","key","todosFromServer","queryFromInput","filteredTodos","filter","toLowerCase","includes","Active","Completed","All","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ab56991.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nenum TodoStatus {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n  const [errorText, setErrorText] = useState('');\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data))\n      .catch((error) => setErrorText(error.toString()));\n  }, []);\n\n  if (errorText) {\n    return (\n      <div>\n        {errorText}\n      </div>\n    );\n  }\n\n  const getVisibleTodos = (\n    todosFromServer: Todo[],\n    queryFromInput: string,\n  ): Todo[] => {\n    let filteredTodos = todos;\n\n    filteredTodos = todosFromServer.filter(todo => (\n      todo.title.toLowerCase().includes(queryFromInput.toLowerCase())\n    ));\n\n    switch (selectValue) {\n      case TodoStatus.Active:\n        return filteredTodos.filter(todo => !todo.completed);\n      case TodoStatus.Completed:\n        return filteredTodos.filter(todo => todo.completed);\n\n      case TodoStatus.All:\n      default:\n        return filteredTodos;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          className=\"TodoList__input\"\n          placeholder=\"Type search word\"\n          value={query}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setQuery(event.currentTarget.value);\n          }}\n        />\n\n        <select\n          className=\"TodoList__select\"\n          onChange={(event) => setSelectValue(event.target.value)}\n          value={selectValue}\n        >\n          {Object.keys(TodoStatus).map(key => (\n\n            <option\n              value={key}\n              key={key}\n            >\n              {key}\n            </option>\n\n          ))}\n        </select>\n\n        {todos ? (\n          <TodoList\n            todos={todos}\n            onSelect={setSelectedUserId}\n            getVisibleTodos={getVisibleTodos}\n            query={query}\n          />\n        ) : (\n          <p>loading...</p>\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSetSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: (userId: number) => void,\n  getVisibleTodos: (todos: Todo[], query: string) => Todo[],\n  query: string,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  getVisibleTodos,\n  query,\n}) => {\n  const visibleTodos = getVisibleTodos(todos, query);\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {visibleTodos.map(todo => (\n            <li\n              className={classnames({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                data-cy=\"filterByTitle\"\n                type=\"button\"\n                onClick={() => onSelect(todo.userId)}\n              >\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst getData = (endpoint: string) => {\n  return fetch(`${API_URL}/${endpoint}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Status of error: ${response.status}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onSetSelectedUserId: (id: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props>\n= ({ userId, onSetSelectedUserId }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [errorText, setErrorText] = useState('');\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser)\n      .catch((error) => setErrorText(error.toString()));\n  }, [userId]);\n\n  if (errorText) {\n    return (\n      <div>\n        {errorText}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\" data-cy=\"userButton\">\n            <span>\n              Selected user:\n              {userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n          <button\n            className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n            type=\"button\"\n            onClick={() => onSetSelectedUserId(0)}\n          >\n            Clear\n          </button>\n        </>\n      ) : (\n        <p>loading...</p>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}